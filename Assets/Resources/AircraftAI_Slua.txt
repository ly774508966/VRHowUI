-- p = debug.getinfo(1).source

local BT = require 'lib.behaviour_tree'

import "UnityEngine"
import "MyAeroplaneAiControl"

if not UnityEngine.GameObject or not  UnityEngine.UI then
	error("Click Make/All to generate lua wrap file")
end


local aiComponent = {}

local ai
local player
local controller
local target

local flyingTask = BT.Task:new()
function flyingTask:run()
  print("flying")

  if target then
    local distance = Vector3.Distance(ai.transform.position, target)
    if (distance < 160) then
      self:success()
    else
      self:running()
    end
  else
     self:success()
  end
end

local targetTask = BT.Task:new()
function targetTask:run()
  print("targeting")

  local v = Random.onUnitSphere * 1000
  v.y = v.y + 1250
  controller:SetTarget(v)
  target = v
  self:success()
end

BT.register('flying', flyingTask)
BT.register('targeting', targetTask)

local Frank = BT:new({
  tree = BT.Sequence:new({
    nodes = {
      'flying', 'targeting'
    }
  })
})

function aiComponent:Init( gameObject )
	Debug.Log(gameObject.name.."###Init")

	ai = gameObject
	player = GameObject.Find("AircraftJet_LOD")
    controller = gameObject:GetComponent("MyAeroplaneAiControl")
end

function aiComponent:Awake( gameObject )
	Debug.Log(gameObject.name.."###Awake")
end

function aiComponent:Start( gameObject )
	Debug.Log(gameObject.name.."###Start")
end

function aiComponent:Update( gameObject )
    -- Debug.Log(gameObject.name.."###Update")

    Frank:run();

	-- print("player.transform ", player.transform.position.x, player.transform.position.y, player.transform.position.z)

	--[[
	if target then
	   local distance = Vector3.Distance(gameObject.transform.position, target.position)
	   if (distance < 5) then
	       target = player.transform;
	       controller:SetTarget(player.transform)
	   end
	else
	   target = player.transform;
	   controller:SetTarget(player.transform)
	end
	]]
end

function main ()
    return aiComponent
end

return aiComponent
